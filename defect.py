import os
import shutil
import re
import sys
from pymatgen.io.xyz import XYZ
from pymatgen.core import Molecule

# Debes tener estas funciones en file_generator.py
from file_generator import submit_slurm_job, generate_job_sh, generate_lammps_input

# Archivos requeridos
REQUIRED_FILES = ["pot26.mtp", "mlip.ini", "artn.in"]

# Verificar archivos necesarios en el directorio actual
for file in REQUIRED_FILES:
    if not os.path.exists(file):
        raise FileNotFoundError(f"¡Archivo requerido {file} no encontrado!")

# Entrada: archivo .xyz original
if len(sys.argv) < 2:
    print("Uso: python script.py archivo.xyz")
    sys.exit(1)

xyz_file = sys.argv[1]

# Leer molécula original y extraer vectores de celda
with open(xyz_file, "r") as f:
    lines = f.readlines()
    n_atoms = int(lines[0].strip())
    lattice_vectors = None
    if len(lines) > 1:
        match = re.search(r'Lattice="([^"]+)"', lines[1])
        if match:
            lattice_vectors = [float(x) for x in match.group(1).split()]

mol = XYZ.from_file(xyz_file).molecule

# Generar vacantes
for i in range(n_atoms):
    new_species = [mol.species[j] for j in range(n_atoms) if j != i]
    new_coords = [mol.cart_coords[j] for j in range(n_atoms) if j != i]
    mol_vac = Molecule(new_species, new_coords)

    folder = f"vac_{i}"
    os.makedirs(folder, exist_ok=True)

    xyz_path = os.path.join(folder, "mol_vac.xyz")
    mol_vac.to(fmt="xyz", filename=xyz_path)

    # Copiar archivos necesarios
    for file in REQUIRED_FILES:
        shutil.copy2(file, folder)

    # Archivos SLURM y LAMMPS
    job_sh_path = os.path.join(folder, "script_job.sh")
    lammps_input_path = os.path.join(folder, "lammps.in")
    lmp_path = os.path.join(folder, "mol_vac.lmp")

    generate_job_sh(
        time="0-01:30:00",
        num_task=4,
        num_core=10,
        mem_per_cpu="8G",
        file_name=job_sh_path
    )
    generate_lammps_input(
        input_data_file="./mol_vac.lmp",
        output_file=lammps_input_path
    )

    # Escribir archivo .lmp
    with open(lmp_path, "w") as f:
        f.write("LAMMPS data file generated by script\n\n")
        f.write(f"{len(mol_vac)} atoms\n")
        unique_species = list({site.species_string for site in mol_vac})
        f.write(f"{len(unique_species)} atom types\n\n")

        if lattice_vectors and len(lattice_vectors) == 9:
            a, b, c = lattice_vectors[0:3], lattice_vectors[3:6], lattice_vectors[6:9]
            f.write(f"0.0 {a[0]:.6f} xlo xhi\n")
            f.write(f"0.0 {b[1]:.6f} ylo yhi\n")
            f.write(f"0.0 {c[2]:.6f} zlo zhi\n")
            f.write(f"{b[0]:.6f} {c[0]:.6f} {c[1]:.6f} xy xz yz\n\n")
        else:
            coords = mol_vac.cart_coords
            f.write(f"{coords[:,0].min()-5:.6f} {coords[:,0].max()+5:.6f} xlo xhi\n")
            f.write(f"{coords[:,1].min()-5:.6f} {coords[:,1].max()+5:.6f} ylo yhi\n")
            f.write(f"{coords[:,2].min()-5:.6f} {coords[:,2].max()+5:.6f} zlo zhi\n\n")

        f.write("Masses\n\n")
        for idx, species in enumerate(unique_species, 1):
            mass = next(site.specie.atomic_mass for site in mol_vac if site.species_string == species)
            f.write(f"{idx} {mass:.4f}\n")
        f.write("\nAtoms # atomic\n\n")

        species_to_type = {species: idx+1 for idx, species in enumerate(unique_species)}
        for idx, site in enumerate(mol_vac, 1):
            atom_type = species_to_type[site.species_string]
            x, y, z = site.coords
            f.write(f"{idx} {atom_type} {x:.6f} {y:.6f} {z:.6f}\n")

    # Enviar job
    os.chdir(folder)
    job_id = submit_slurm_job('script_job.sh')
    os.chdir("..")

    print(f"Vacante {i}: Carpeta '{folder}' creada y trabajo enviado. Job ID: {job_id}")

